@startuml
!include <C4/C4_Container>

Container_Boundary(apiGatewayContainer, "API Gateway") {
    Container(apiGateway, "API Gateway", "Spring Boot", "Центральная точка входа для всех запросов от внешних систем (пользователей и устройств).")
}

Container_Boundary(deviceServiceContainer, "Device Service") {
    Container(deviceService, "Device Service", "Spring Boot", "Управляет устройствами. Читает данные из Kafka и отправляет их в Telemetry Service.")
    ContainerDb(deviceDb, "Device DB", "PostgreSQL", "Хранит данные о устройствах.")
}

Container_Boundary(telemetryServiceContainer, "Telemetry Service") {
    Container(telemetryService, "Telemetry Service", "Spring Boot", "Обрабатывает и сохраняет телеметрические данные, поступающие от устройств.")
    ContainerDb(telemetryDb, "Telemetry DB", "mongoDb", "Хранит телеметрические данные от устройств.")
}

Container_Boundary(userServiceContainer, "User Service") {
    Container(userService, "User Service", "Spring Boot", "Управляет данными пользователей и их учетными записями.")
    ContainerDb(userDb, "User DB", "PostgreSQL", "Хранит данные о пользователях.")
}

Container_Boundary(houseServiceContainer, "House Service") {
    Container(houseService, "House Service", "Spring Boot", "Управляет данными о домах и связанных с ними устройствах.")
    ContainerDb(houseDb, "House DB", "PostgreSQL", "Хранит данные о домах.")
}

Container_Boundary(kafkaContainer, "Kafka") {
    Container(kafkaBroker, "Kafka Broker", "Apache Kafka", "Обрабатывает сообщения и управляет топиками.")
    Container(zookeeper, "ZooKeeper", "Apache ZooKeeper", "Координирует и управляет кластером Kafka.")
    Container(heatingTopic, "heating_topic", "Topic", "Топик для событий системы отопления.")
    Container(cameraTopic, "camera_topic", "Topic", "Топик для событий системы наблюдения.")
    Container(gateControlTopic, "gate_control_topic", "Topic", "Топик для событий системы управления воротами.")
    Container(lightingTopic, "lighting_topic", "Topic", "Топик для событий системы освещения.")
    Container(updatingTopic, "updating_topic", "Topic", "Топик для обновленных настроек устройств.")
}

Container_Boundary(sensorApiLayerContainer, "Sensor API Layer") {
    Container(sensorApiLayer, "Sensor API Layer", "Spring Boot", "Принимает данные от датчиков и записывает их в Kafka.")
}

Container_Ext(sensor, "Датчики", "Отправляют данные телеметрии через Sensor API Layer.")
Container_Ext(user, "Пользователь", "Взаимодействует с API Gateway для управления домом и устройствами.")

Rel(user, apiGateway, "Запросы на управление устройствами и просмотр данных телеметрии")
Rel(apiGateway, userService, "Верификация пользователя и доступ к данным пользователя")
Rel(apiGateway, houseService, "Доступ к данным о доме и связанных устройствах")
Rel(apiGateway, deviceService, "Управление устройствами. Запросы на конфигурации устройств")
Rel(deviceService, telemetryService, "Передача данных телеметрии на сохранение и анализ")

Rel(sensor, sensorApiLayer, "Отправка данных телеметрии")
Rel(sensor, apiGateway, "Запрос команд")
Rel(sensorApiLayer, kafkaBroker, "Запись данных в топики")
Rel(deviceService, kafkaBroker, "Чтение данных из топиков")

SHOW_LEGEND()
@enduml
